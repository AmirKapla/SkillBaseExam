#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <arpa/inet.h>
#include <unistd.h>

int main() {
    srand(time(NULL));  // Initialize random number generator with current time

    int server_socket, client_socket;
    struct sockaddr_in server_addr, client_addr;
    socklen_t addr_len = sizeof(client_addr);

    server_socket = socket(AF_INET, SOCK_STREAM, 0);
    if (server_socket == -1) {
        perror("Socket creation failed");
        exit(EXIT_FAILURE);
    }
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(8080);
    server_addr.sin_addr.s_addr = INADDR_ANY;

    if (bind(server_socket, (struct sockaddr *)&server_addr, sizeof(server_addr))>
        perror("Binding failed");
        close(server_socket);
        exit(EXIT_FAILURE);
    }

    if (listen(server_socket, 5) == -1) {
        perror("Listening failed");
        close(server_socket);
        exit(EXIT_FAILURE);
    }
    printf("Server is listening...\n");

    client_socket = accept(server_socket, (struct sockaddr *)&client_addr, &addr_>
    if (client_socket == -1) {
        perror("Accepting failed");
        close(server_socket);
        exit(EXIT_FAILURE);
    }
    int random_number = rand() % 900 + 100;
    int network_random_number = htonl(random_number);
    if (write(client_socket, &network_random_number, sizeof(network_random_number>
        perror("Error sending data to client");
    } else {
        printf("Random number sent: %d\n", random_number);
    }
    close(client_socket);
    close(server_socket);
    return 0;
}

